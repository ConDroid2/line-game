//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/BaseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""8e87bbc1-fd86-4ad8-bea2-f89178c76f97"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d58270cc-77d1-4764-9051-9f8d81b13ff1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""740b8332-5c64-46e6-868c-3c0e78a7ca0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimMode"",
                    ""type"": ""Button"",
                    ""id"": ""0256b432-7b75-44df-9c31-628e8bdecf33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireProjectile"",
                    ""type"": ""Button"",
                    ""id"": ""3f878c0f-e1b7-49fd-80ab-4e8948c707ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""aca5162f-9a33-4e41-b9ec-0a5f40ec61c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""20427ad2-42bb-43ff-a265-7ce3e8e2e0d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a7a3416e-7e90-441e-88a9-d3473bc5583b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d2f55ae8-8774-4f4a-85a3-e9f62ed2d906"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""88e3d780-1770-4aa2-a98e-454f29aaf6b0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b906301f-5c54-4c4e-bce3-305aae39cc68"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""662862fe-9c1f-46db-ac1b-c2ba89c75e3c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c96cf7d5-0289-47e2-98c4-4c7418a1a855"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4a87ae88-3c4e-474f-86c1-36de21697e46"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""90f85612-f583-4e9e-9504-273858635e59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""227bbc69-60a9-4fc7-9832-04bdd36fa46f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bde62143-405d-4457-9233-c65871c6938d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eba869f-c807-4e07-924c-d3fdb0204370"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3039bf0c-e243-4f1c-b830-f1fff9015699"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3f91004-fc5d-4395-8c99-adda1bed039f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e78e9ce-8c4d-4a3d-8b0d-cea9d472e63d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4cf6abc-a3ff-43c7-b94b-62a21f003085"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b90cd4e7-80a1-4f20-9e05-4ef53568bf76"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9ab4152-2c01-45b5-a79a-59cf93121b4c"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a53f87c-fb86-4cd3-9fa2-3bc3c4dda3f0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TestMap"",
            ""id"": ""c98d2327-78fe-457b-8284-2eac118f7720"",
            ""actions"": [
                {
                    ""name"": ""Vector2"",
                    ""type"": ""Value"",
                    ""id"": ""97b62e99-a235-4af0-a2f7-7f354e70173c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7b0cd6c-6fc0-4fe2-a99e-c60a2bb4e334"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Vector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Move = m_PlayerMap.FindAction("Move", throwIfNotFound: true);
        m_PlayerMap_Sprint = m_PlayerMap.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerMap_AimMode = m_PlayerMap.FindAction("AimMode", throwIfNotFound: true);
        m_PlayerMap_FireProjectile = m_PlayerMap.FindAction("FireProjectile", throwIfNotFound: true);
        m_PlayerMap_Grapple = m_PlayerMap.FindAction("Grapple", throwIfNotFound: true);
        // TestMap
        m_TestMap = asset.FindActionMap("TestMap", throwIfNotFound: true);
        m_TestMap_Vector2 = m_TestMap.FindAction("Vector2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_Move;
    private readonly InputAction m_PlayerMap_Sprint;
    private readonly InputAction m_PlayerMap_AimMode;
    private readonly InputAction m_PlayerMap_FireProjectile;
    private readonly InputAction m_PlayerMap_Grapple;
    public struct PlayerMapActions
    {
        private @BaseControls m_Wrapper;
        public PlayerMapActions(@BaseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMap_Move;
        public InputAction @Sprint => m_Wrapper.m_PlayerMap_Sprint;
        public InputAction @AimMode => m_Wrapper.m_PlayerMap_AimMode;
        public InputAction @FireProjectile => m_Wrapper.m_PlayerMap_FireProjectile;
        public InputAction @Grapple => m_Wrapper.m_PlayerMap_Grapple;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnSprint;
                @AimMode.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimMode;
                @AimMode.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimMode;
                @AimMode.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnAimMode;
                @FireProjectile.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireProjectile;
                @FireProjectile.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireProjectile;
                @FireProjectile.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnFireProjectile;
                @Grapple.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrapple;
                @Grapple.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrapple;
                @Grapple.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnGrapple;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @AimMode.started += instance.OnAimMode;
                @AimMode.performed += instance.OnAimMode;
                @AimMode.canceled += instance.OnAimMode;
                @FireProjectile.started += instance.OnFireProjectile;
                @FireProjectile.performed += instance.OnFireProjectile;
                @FireProjectile.canceled += instance.OnFireProjectile;
                @Grapple.started += instance.OnGrapple;
                @Grapple.performed += instance.OnGrapple;
                @Grapple.canceled += instance.OnGrapple;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

    // TestMap
    private readonly InputActionMap m_TestMap;
    private ITestMapActions m_TestMapActionsCallbackInterface;
    private readonly InputAction m_TestMap_Vector2;
    public struct TestMapActions
    {
        private @BaseControls m_Wrapper;
        public TestMapActions(@BaseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Vector2 => m_Wrapper.m_TestMap_Vector2;
        public InputActionMap Get() { return m_Wrapper.m_TestMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMapActions set) { return set.Get(); }
        public void SetCallbacks(ITestMapActions instance)
        {
            if (m_Wrapper.m_TestMapActionsCallbackInterface != null)
            {
                @Vector2.started -= m_Wrapper.m_TestMapActionsCallbackInterface.OnVector2;
                @Vector2.performed -= m_Wrapper.m_TestMapActionsCallbackInterface.OnVector2;
                @Vector2.canceled -= m_Wrapper.m_TestMapActionsCallbackInterface.OnVector2;
            }
            m_Wrapper.m_TestMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Vector2.started += instance.OnVector2;
                @Vector2.performed += instance.OnVector2;
                @Vector2.canceled += instance.OnVector2;
            }
        }
    }
    public TestMapActions @TestMap => new TestMapActions(this);
    public interface IPlayerMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnAimMode(InputAction.CallbackContext context);
        void OnFireProjectile(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
    }
    public interface ITestMapActions
    {
        void OnVector2(InputAction.CallbackContext context);
    }
}
